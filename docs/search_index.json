[
["section-introduction.html", "Framingham FEV1 Predictor 1 Introduction", " Framingham FEV1 Predictor 1 Introduction TODO: Write Introduction It might be helpful to take a look at the Framingham FEV1 web application before reading further, as this gives a visualization of the package: Framingham FEV1 Predictor. "],
["section-thestudy.html", "2 The Study", " 2 The Study The framinghamPredictor package and application are based on the paper An Individualized Prediction Model for Long-term Lung Function Trajectory and Risk of COPD in the General Population, published in 2019. "],
["section-packageinR.html", "3 Using the Package in R (Developers Only) 3.1 Installation 3.2 Running the Model", " 3 Using the Package in R (Developers Only) As this is a private package, this section is for developers only. If you would like to discuss development of the package, please contact either: Amin Adibi: amin.adibi@ubc.ca Mohsen Sadatsafavi: mohsen.sadatsafavi@ubc.ca 3.1 Installation If you do not have R installed on your computer, please go to Appendix 1. Once you have R installed, you can install the framinghamPredictor package as per the instructions below: Windows 7 or Later Download and Install the latest version of R from https://cran.r-project.org/bin/windows/base/ Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Using either an R session in Terminal or in R Studio, install the package devtools: install.packages(&#39;devtools&#39;) Install framinghamPredictor from GitHub: Note: This package has been set to private. devtools::install_github(&#39;resplab/framinghamPredictor&#39;) Mac OS Sierra and Later Download and Install the latest version of R from https://cran.r-project.org/bin/macosx/ Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Using either an R session in Terminal or in R Studio, install the package devtools: install.packages(&#39;devtools&#39;) Install epicR from GitHub: devtools::install_github(&#39;resplab/epicR&#39;) Ubuntu 16.04 and Later Install R if you don’t have it installed already. See Appendix 1 for installation guide. Download and Install R Studio from https://www.rstudio.com/products/rstudio/download/ Using either an R session in Terminal or in R Studio, install the package devtools: install.packages (&#39;devtools&#39;) Install framinghamPredictor from GitHub: devtools::install_github(&#39;resplab/framinghamPredictor&#39;) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;resplab/framinghamPredictor&quot;) 3.2 Running the Model Now that you have installed framinghamPredictor, you can load the library: library(framinghamPredictor) There should be the default input predictors which come preloaded: print(sample_predictors) &gt; fev1_0 fvc_0 age triglycerides hematocrit albumin globulin ALP WBC QRS_intv wine beer cocktail height smoke_year &gt; 1 1 1 50 NA NA NA NA NA NA NA NA NA NA 180 20 &gt; daily_cigs sex broncho dyspnea_exc night_sym &gt; 1 4 female To run the model, you can use these sample_predictors, or adjust them yourself: make_predictions(resp_var=&quot;fev1&quot;, predictors=sample_predictors) "],
["section-webapp.html", "4 Using the Web Application", " 4 Using the Web Application We have created a web application which can be found here: Framingham FEV1 Web Application "],
["section-using-the-package-as-an-api-prism.html", "5 Using the Package as an API (PRISM) 5.1 API in R/Javascript/Python/Bash", " 5 Using the Package as an API (PRISM) PRISM (Programmable Interface for Simulation/Statistical Models) is a package which provides a user-friendly API interface in R for clinical prediction and decision analytics models hosted on UBC PRISM cloud. For more information, the PRISM package can be found on GitHub at PRISM on GitHub. 5.1 API in R/Javascript/Python/Bash To get started, you will need to install a few packages: brew install curl sudo apt install curl install.packages(\"devtools\") devtools::install_github(\"resplab/peermodels\") pip3 install requests The next step is to get an API key. For now, we will be giving out API keys on a case-by-case basis, so please email either: Amin Adibi: amin.adibi@ubc.ca Mohsen Sadatsafavi: mohsen.sadatsafavi@ubc.ca Setting the Input To run the model, you can either use the default input, or set your own input. To see what the default input is, you can use the following POST call: curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"get_default_input\"]}' http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"get_default_input\"]}' http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json let arguments = JSON.stringify({ api_key: 'YOUR_API_KEY', func: [\"get_default_input\"] }); request = new XMLHttpRequest(); request.open('POST', 'http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json'); request.setRequestHeader('Content-Type', 'application/json'); request.send(arguments); let results = request.response; library(prism) connect_to_model('framinghamPrism', api_key = YOUR_API_KEY) input = get_default_input() import json import requests api_key = 'YOUR_API_KEY' response = requests.post(\"http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json\", json = {\"api_key\":[api_key], \"func\": [\"get_default_input\"]}) print(response) results = json.loads(response.text) print(results) Running the Model To run the model with the default input, you can use the following POST call: curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"], \"model_input\":[{}]}' http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json curl -X POST -H \"Content-Type: application/json\" -d '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"], \"model_input\":[{}]}' http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json curl -Body '{\"api_key\":[\"YOUR_API_KEY\"],\"func\":[\"prism_model_run\"],\"model_input\":[{}]}' -Method POST -uri http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json -Headers @{\"Content-type\"=\"application/json\"} let patient = JSON.stringify({ api_key: 'YOUR_API_KEY', func: [\"prism_model_run\"], model_input: [{}] }); request.open('POST', 'http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json'); request.setRequestHeader('Content-Type', 'application/json'); request.send(patient); let results = request.response; library(prism) connect_to_model('framinghamPrism', api_key = YOUR_API_KEY) results = model_run() api_key = 'YOUR_API_KEY' patientInput = [{ }] response = requests.post(\"http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json\", json = {\"api_key\":[api_key], \"func\": [\"prism_model_run\"], \"model_input\": patientInput}) print(response) results = json.loads(response.text) print(results) Now, the input for the framinghamPredictor package is quite large, so we won’t print all the input options here. You may change as many of the default inputs as you like. I have highlighted below a few of the more common input parameters you might want to adjust: curl -X POST -H \"Content-Type: application/json\" -d '{ \"api_key\":[\"YOUR_API_KEY\"], \"func\":[\"prism_model_run\"], \"model_input\":[{ \"predictors\":{ \"fev1_0\": 1.0, \"fvc_0\": 1.0, \"age\": 75, \"triglycerides\": null, \"hematocrit\": null, \"albumin\": null, \"globulin\": null, \"ALP\": null, \"WBC\": null, \"QRS_intv\": null, \"wine\": null, \"beer\": null, \"cocktail\": null, \"height\": 170, \"smoke_year\": null, \"daily_cigs\": null, \"sex\": \"male\", \"broncho\": \"\", \"dyspnea_exc\": \"\", \"night_sym\": \"\" }, \"resp_var\": \"fev1\" } ]}' http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json curl -X POST -H \"Content-Type: application/json\" -d '{ \"api_key\":[\"YOUR_API_KEY\"], \"func\":[\"prism_model_run\"], \"model_input\":[ { \"predictors\":{ \"fev1_0\": 1.0, \"fvc_0\": 1.0, \"age\": 75, \"triglycerides\": null, \"hematocrit\": null, \"albumin\": null, \"globulin\": null, \"ALP\": null, \"WBC\": null, \"QRS_intv\": null, \"wine\": null, \"beer\": null, \"cocktail\": null, \"height\": 170, \"smoke_year\": null, \"daily_cigs\": null, \"sex\": \"male\", \"broncho\": \"\", \"dyspnea_exc\": \"\", \"night_sym\": \"\" }, \"resp_var\": \"fev1\" } ]}' http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json curl -Body '{ \"api_key\":[\"YOUR_API_KEY\"], \"func\":[\"prism_model_run\"], \"model_input\":[{ \"predictors\":{ \"fev1_0\": 1.0, \"fvc_0\": 1.0, \"age\": 75, \"triglycerides\": null, \"hematocrit\": null, \"albumin\": null, \"globulin\": null, \"ALP\": null, \"WBC\": null, \"QRS_intv\": null, \"wine\": null, \"beer\": null, \"cocktail\": null, \"height\": 170, \"smoke_year\": null, \"daily_cigs\": null, \"sex\": \"male\", \"broncho\": \"\", \"dyspnea_exc\": \"\", \"night_sym\": \"\" }, \"resp_var\": \"fev1\" }]}' -Method POST -uri http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json -Headers @{\"Content-type\"=\"application/json\"} let patient = JSON.stringify({ api_key: 'YOUR_API_KEY', func: [\"prism_model_run\"], model_input: [ { \"predictors\":{ \"fev1_0\": 1.0, \"fvc_0\": 1.0, \"age\": 75, \"triglycerides\": null, \"hematocrit\": null, \"albumin\": null, \"globulin\": null, \"ALP\": null, \"WBC\": null, \"QRS_intv\": null, \"wine\": null, \"beer\": null, \"cocktail\": null, \"height\": 170, \"smoke_year\": null, \"daily_cigs\": null, \"sex\": \"male\", \"broncho\": \"\", \"dyspnea_exc\": \"\", \"night_sym\": \"\" }, \"resp_var\": \"fev1\" } ] }); request.open('POST', 'http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json'); request.setRequestHeader('Content-Type', 'application/json'); request.send(patient); let results = request.response; library(peermodels) connect_to_model('framinghamPrism', api_key = YOUR_API_KEY) input = list( resp_var=\"fev1\", predictors = list(fev1_0 = 1.0, fvc_0 = 1.0, age=75, triglycerides = NA, hematocrit = NA, albumin=NA, globulin=NA, ALP=NA, WBC=NA, QRS_intv=NA, wine=NA, beer=NA, cocktail=NA, height=170, smoke_year=NA, daily_cigs=NA, sex=\"male\", broncho=\"\", dyspnea_exc=\"\", night_sym=\"\")) results = model_run(input) api_key = 'YOUR_API_KEY' patientInput = [{ \"predictors\":{ \"fev1_0\": 1.0, \"fvc_0\": 1.0, \"age\": 75, \"triglycerides\": null, \"hematocrit\": null, \"albumin\": null, \"globulin\": null, \"ALP\": null, \"WBC\": null, \"QRS_intv\": null, \"wine\": null, \"beer\": null, \"cocktail\": null, \"height\": 170, \"smoke_year\": null, \"daily_cigs\": null, \"sex\": \"male\", \"broncho\": \"\", \"dyspnea_exc\": \"\", \"night_sym\": \"\" }, \"resp_var\": \"fev1\" }] response = requests.post(\"http://prism.resp.core.ubc.ca/ocpu/library/framinghamPrism/R/gateway/json\", json = {\"api_key\":[api_key], \"func\": [\"prism_model_run\"], \"model_input\": patientInput}) print(response) results = json.loads(response.text) print(results) 5.1.1 Plots When you call model_run, some plots are created from the data. To view these plots, you will need to use the draw_plots function: curl -o ~/your_plot_name.png http://localhost:5656/ocpu/tmp/{session_id}/graphics/{plot_number}/png curl -o ~/your_plot_name.png http://localhost:5656/ocpu/tmp/{session_id}/graphics/{plot_number}/png draw_plots(plot_number=NULL) "],
["section-appendix1.html", "6 Appendix 1: Installing R 6.1 Step 1: Mirrors 6.2 Mac OS X 6.3 Windows 6.4 Ubuntu", " 6 Appendix 1: Installing R This is a guide to installing R, geared mainly at beginner audiences. All the information below can be found at https://www.r-project.org/; I’ve just simplified it a bit. 6.1 Step 1: Mirrors When you go the the R home page, you will see a link to download R, which will take you to a list of mirrors. They are organized by country, so click on one that is close to your location. Since our group is based out of Vancouver, I will select one of the mirrors in Canada: SFU Mirror. Once you have clicked on the closest mirror, you will be asked to choose what type of computer you have. 6.2 Mac OS X If you are using a Mac (Apple) computer, click on the link for Mac OS X. You will be redirected to a page that says “R for Mac OS X.” To install R, you want to click on one of the files ending in “.pkg”. If your operating system is fairly up-to-date, scroll to “Latest Release” and click on the file that looks like “R-3.X.Y.pkg,” with X and Y being numbers for the latest release. R should begin downloading, and your Mac package manager will pop up with the rest of the instructions. If your operating system is older, you might want to scroll down to “Legacy Releases,” and download one of those “.pkg” files instead. It should tell you on the page what version your computer should use. 6.3 Windows If you are using Windows, click on the link for Windows. You will be redirected to a page that says “R for Windows.” To install R, click on the link “base,” and on the next page, “Download R 3.X.Y for Windows,” where X and Y are the version numbers for the latest release. R should begin downloading. 6.4 Ubuntu First, check which Ubuntu version you are using in Terminal: lsb_release -a {YOUR_UBUNTU_VERSION} is the Codename given. For example, on my computer it would be bionic. Open the /etc/apt/sources.list file: sudo gedit /etc/apt/sources.list For R 3.6 paste the following in the file: deb https://cloud.r-project.org/bin/linux/ubuntu {YOUR_UBUNTU_VERSION}-cran35/ On my computer, this would be: deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/ Install R: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 sudo apt-get update sudo apt-get install r-base "]
]
